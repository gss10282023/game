using Godot;    // 引入 Godot 命名空间，主要是为了与 Godot 框架集成

// 定义 Boss 状态接口，用于描述 Boss 的不同“状态”。
// 状态机（State Machine）的核心思想：
// - Boss 不同阶段、不同行为写成不同状态类
// - 每个状态类都实现同一组方法：Enter、Exit、Tick
// - 可在运行时自由切换状态
//
// 好处：
// - 让 Boss 行为拆分成小模块，代码更清晰
// - 每种状态只关心自己要做的事
public interface IBossState
{
	/// <summary>
	/// 当 Boss 进入此状态时调用。
	/// 用于执行一次性的初始化逻辑，例如：
	/// - 播放进场动画
	/// - 设置初始参数
	/// - 产生特效
	/// 
	/// 举例：
	///   在“狂暴”状态的 Enter 中，可能把攻击速度翻倍。
	/// </summary>
	void Enter();

	/// <summary>
	/// 当 Boss 离开此状态时调用。
	/// 用于清理或重置数据，例如：
	/// - 停止动画
	/// - 移除特效
	/// - 恢复属性
	/// 
	/// 举例：
	///   离开“狂暴”状态时，恢复正常攻击速度。
	/// </summary>
	void Exit();

	/// <summary>
	/// 每帧都会调用，用于更新状态逻辑。
	/// 
	/// 参数 delta：
	///   - 本帧经过的时间（秒）
	///   - 用于计算帧率无关的逻辑
	/// 
	/// 返回值：
	///   - true：表示本帧已完成处理（例如不再继续后续逻辑）
	///   - false：表示本帧没有完全处理，可让外层继续处理其他事情
	/// 
	/// 举例：
	///   - Tick() 中检测到 Boss 血量为零，可以返回 true 表示已结束战斗。
	///   - Tick() 中执行子弹发射间隔逻辑，返回 false 让外层继续处理其他系统。
	/// </summary>
	void Tick(double delta);
}
